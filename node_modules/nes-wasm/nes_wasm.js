import * as wasm from './nes_wasm_bg.wasm';

let cachegetUint8Memory = null;
function getUint8Memory() {
    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory;
}

let WASM_VECTOR_LEN = 0;

function passArray8ToWasm(arg) {
    const ptr = wasm.__wbindgen_malloc(arg.length * 1);
    getUint8Memory().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

function getStringFromWasm(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));
}

const heap = new Array(32);

heap.fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}
/**
*/
export class BufferStruct {

    static __wrap(ptr) {
        const obj = Object.create(BufferStruct.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_bufferstruct_free(ptr);
    }
    /**
    * @returns {number}
    */
    get pointer() {
        const ret = wasm.__wbg_get_bufferstruct_pointer(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set pointer(arg0) {
        wasm.__wbg_set_bufferstruct_pointer(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    get length() {
        const ret = wasm.__wbg_get_bufferstruct_length(this.ptr);
        return ret >>> 0;
    }
    /**
    * @param {number} arg0
    */
    set length(arg0) {
        wasm.__wbg_set_bufferstruct_length(this.ptr, arg0);
    }
}
/**
*/
export class EmuInterface {

    static __wrap(ptr) {
        const obj = Object.create(EmuInterface.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_emuinterface_free(ptr);
    }
    /**
    * @param {Uint8Array} buffer
    * @returns {EmuInterface}
    */
    static new(buffer) {
        const ret = wasm.emuinterface_new(passArray8ToWasm(buffer), WASM_VECTOR_LEN);
        return EmuInterface.__wrap(ret);
    }
    /**
    * @returns {BufferStruct}
    */
    get_frame() {
        const ret = wasm.emuinterface_get_frame(this.ptr);
        return BufferStruct.__wrap(ret);
    }
    /**
    * @param {KeyCode} key
    * @param {boolean} state
    */
    set_button(key, state) {
        _assertClass(key, KeyCode);
        const ptr0 = key.ptr;
        key.ptr = 0;
        wasm.emuinterface_set_button(this.ptr, ptr0, state);
    }
}
/**
*/
export class KeyCode {

    static __wrap(ptr) {
        const obj = Object.create(KeyCode.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_keycode_free(ptr);
    }
    /**
    * @param {number} val
    * @returns {KeyCode}
    */
    static new(val) {
        const ret = wasm.keycode_new(val);
        return KeyCode.__wrap(ret);
    }
}

export const __wbindgen_string_new = function(arg0, arg1) {
    const ret = getStringFromWasm(arg0, arg1);
    return addHeapObject(ret);
};

export const __wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm(arg0, arg1));
};

export const __wbindgen_rethrow = function(arg0) {
    throw takeObject(arg0);
};

